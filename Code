# Buidling Logistic regression model for Churn classification
# Data file
telco_data <- read.csv("D:\\Portfolio-dashboards\\Customer_Churn_project\\telecom_customer_churn1.csv")
glimpse(telco_data)
summary(telco_data)

# there is no null or missing values in the data.

#normalizing numerical variables

telco_data_int <- telco_data[,c("Tenure.in.Months", "Monthly.Charge", "Total.Charges")]
telco_data_int <- data.frame(scale(telco_data_int))
glimpse(telco_data_int)

#creating new feature based on tenure

telco_data<- mutate(telco_data,tenure_bin=Tenure.in.Months)
telco_data$tenure_bin[telco_data$tenure_bin >=0 & telco_data$tenure_bin <= 12] <- '0-1 year'
telco_data$tenure_bin[telco_data$tenure_bin >=12 & telco_data$tenure_bin <= 24] <- '1-2 year'
telco_data$tenure_bin[telco_data$tenure_bin >24 & telco_data$tenure_bin <= 36] <- '2-3 year'
telco_data$tenure_bin[telco_data$tenure_bin >36 & telco_data$tenure_bin <= 48] <- '3-4 year'
telco_data$tenure_bin[telco_data$tenure_bin >48 & telco_data$tenure_bin <= 60] <- '4-5 year'
telco_data$tenure_bin[telco_data$tenure_bin >60 & telco_data$tenure_bin <= 72] <- '5-6 year'
telco_data$tenure_bin[telco_data$tenure_bin >72] <- '7 & moreyear'
telco_data$tenure_bin<-as.factor(telco_data$tenure_bin)
glimpse(telco_data)

#converting categorical data to matrix

td2=telco_data[,-c(10,14,29,30,31,28)]
glimpse(td2)
td1=td2[,-c(1,3,5,6,7,24,25)]
glimpse(td1)

dummy<- data.frame(sapply(td1,function(x) data.frame(model.matrix(~x-1,data =td1))[,-1]))
glimpse(dummy)

td3=td2[,c(1,3,5,6,7,24,25)]
glimpse(td3)
td4=td3[,c(2,3)]

# telco_final data is ready for modelling.

telco_final <- cbind(telco_data_int,dummy,td4)
glimpse(telco_final)
# in this final data when value of status is 1 means "joined_stayed"=1 & o means "churned"

#splitting data to 70-30 ratio.
set.seed(1)

#creating ID column
telco_final$id <- 1:nrow(telco_final)

#use 70% of dataset as training set and 30% as test set 
train <- telco_final %>% dplyr::sample_frac(0.70)
test  <- dplyr::anti_join(telco_final, train, by = 'id')
glimpse(train)
glimpse(test)

# status= joined_stayed=1 & churned=0

model_1 = glm(status ~ ., data = train, family = "binomial")
summary(model_1)

#model_1 has all features.

#let's test on our test dataset
validation_1=test[,-c(39)]
pred_1 <- predict(model_1, type = "response", newdata = validation_1)
pred_churn_1 <- factor(ifelse(pred_1 <= 0.60, "Churned", "Joined_stayed"))
actual_churn_1 <- factor(ifelse(test$status==0,"Churned","Joined_stayed"))
table(actual_churn_1,pred_churn_1)

conf_final_1 <- confusionMatrix(pred_churn_1, actual_churn_1)
accuracy_1 <- conf_final_1$overall[1]
accuracy_1
sensitivity <- conf_final$byClass[1]
specificity <- conf_final$byClass[2]
sensitivity

# creating function for checking the acuuracy against different values of "cutoff"" or "threshold""
calculate_values <- function(values) {
  # Initialize an empty list to store the results
  accuracy <- list()
  sensitivity<-list()
  specificity<- list()

  # Loop through the values in the sequence
  for (value in values) {
    # Perform some math calculations on the value
    pred_churn_1 <- factor(ifelse(pred_1 <= value, "Churned", "Joined_stayed"))
    actual_churn_1 <- factor(ifelse(test$status==0,"Churned","Joined_stayed"))
    conf_final_1 <- confusionMatrix(pred_churn_1, actual_churn_1)
    accuracy_1 <- conf_final_1$overall[1]
    sensitivity_1 <- conf_final_1$byClass[1]
    specificity_1 <- conf_final_1$byClass[2]
    # Append the result to the list of results
    accuracy <- c(accuracy, accuracy_1)
    sensitivity <- c(sensitivity, sensitivity_1)
    specificity <- c(specificity, specificity_1)
  }

  # Return the list of results
  return(invisible(list(accuracy,sensitivity,specificity)))
}
values=c(0.20,0.40,0.50,0.60,0.70)
calculate_values(values)

Let's improve the model using stepAIC methos.

model_2<- stepAIC(model_1, direction="both")


Model_2=glm(status ~ Tenure.in.Months + Monthly.Charge + Total.Charges + 
    Married + Offer.xOffer.A + Offer.xOffer.B + Phone.Service + 
    Multiple.Lines.xNo + Internet.Type.xDSL + Online.Security.xNo + 
    Online.Backup.xNo + Premium.Tech.Support.xNo + Streaming.TV.xNo + 
    Streaming.Music.xNo + Contract.xOne.Year + Contract.xTwo.Year + 
    Paperless.Billing + Payment.Method.xCredit.Card + Payment.Method.xMailed.Check + 
    tenure_bin.x2.3.year + tenure_bin.x3.4.year + tenure_bin.x4.5.year + 
    tenure_bin.x5.6.year + Age + Number.of.Dependents ,data=train,family="binomial")
#3734 aic

Model_2_1=glm(status ~ Tenure.in.Months + Monthly.Charge + 
    Married + Offer.xOffer.A + Offer.xOffer.B + Phone.Service + 
    Multiple.Lines.xNo + Internet.Type.xDSL + Online.Security.xNo + 
    Online.Backup.xNo + Premium.Tech.Support.xNo + Streaming.TV.xNo + 
    Streaming.Music.xNo + Contract.xOne.Year + Contract.xTwo.Year + 
    Paperless.Billing + Payment.Method.xCredit.Card + Payment.Method.xMailed.Check + 
    Age + Number.of.Dependents ,data=train,family="binomial")
#3785 AIC

Model_2_2=glm(status ~ Monthly.Charge + 
    Married + Offer.xOffer.A + Offer.xOffer.B + Phone.Service + 
    Multiple.Lines.xNo + Internet.Type.xDSL + Online.Security.xNo + 
    Online.Backup.xNo + Premium.Tech.Support.xNo + Streaming.TV.xNo + 
    Streaming.Music.xNo + Contract.xOne.Year + Contract.xTwo.Year + 
    Paperless.Billing + Payment.Method.xCredit.Card + Payment.Method.xMailed.Check + 
    tenure_bin.x2.3.year + tenure_bin.x3.4.year + tenure_bin.x4.5.year + 
    tenure_bin.x5.6.year + Age + Number.of.Dependents ,data=train,family="binomial")    
#3835 aic  

varImp(model_2_1)
#final model
model_3<- stepAIC(model_2_1, direction="both")

pred_3 <- predict(model_3, type = "response", newdata = validation_1)


calculate_values <- function(values) {
  # Initialize an empty list to store the results
  accuracy <- list()
  sensitivity<-list()
  specificity<- list()

  # Loop through the values in the sequence
  for (value in values) {
    # Perform some math calculations on the value
    pred_churn_1 <- factor(ifelse(pred_3 <= value, "Churned", "Joined_stayed"))
    actual_churn_1 <- factor(ifelse(test$status==0,"Churned","Joined_stayed"))
    conf_final_1 <- confusionMatrix(pred_churn_1, actual_churn_1)
    accuracy_1 <- conf_final_1$overall[1]
    sensitivity_1 <- conf_final_1$byClass[1]
    specificity_1 <- conf_final_1$byClass[2]
    # Append the result to the list of results
    accuracy <- c(accuracy, accuracy_1)
    sensitivity <- c(sensitivity, sensitivity_1)
    specificity <- c(specificity, specificity_1)
  }

  # Return the list of results
  return(invisible(list(accuracy,sensitivity,specificity)))
}

# based on accuracy, sensitivity and specificity model with 0.70 thresold would be better as it has 80% accuracy for right prediction asn 20% for false prediction.

###### anthoer way

calculate_values1 <- function(values) {
  
  # Loop through the values in the sequence
  for (value in values) {
    # Perform some math calculations on the value
    pred_churn_1 <- factor(ifelse(pred_3 <= value, "Churned", "Joined_stayed"))
    actual_churn_1 <- factor(ifelse(test$status==0,"Churned","Joined_stayed"))
    conf_final_1 <- confusionMatrix(pred_churn_1, actual_churn_1)
    accuracy_1 <- conf_final_1$overall[1]
    sensitivity_1 <- conf_final_1$byClass[1]
    specificity_1 <- conf_final_1$byClass[2]
    # Append the result to the list of results
   out<-t(as.matrix(c(sensitivity_1, specificity_1, accuracy_1)))
   colnames(out) <- c("sensitivity", "specificity", "accuracy")

  }

  # Return the list of results
return(out)
}
values = seq(0.01,0.80,length=100)
OUT = matrix(0,100,3)

for(i in 1:100)
{
OUT[i,] = calculate_values1(values[i])
}

plot(values, OUT[,1],xlab="Cutoff",ylab="Value",cex.lab=1.5,cex.axis=1.5,ylim=c(0,1),
type="l",lwd=2,axes=FALSE,col=2)
axis(1,seq(0,1,length=5),seq(0,1,length=5),cex.lab=1.5)
axis(2,seq(0,1,length=5),seq(0,1,length=5),cex.lab=1.5)
lines(values,OUT[,2],col="darkgreen",lwd=2)
lines(values,OUT[,3],col=4,lwd=2)
box()
legend("bottom",col=c(2,"darkgreen",4,"darkred"),text.font =3,inset = 0.02,
box.lty=0,cex = 0.8,lwd=c(2,2,2,2),c("Sensitivity","Specificity","Accuracy"))

abline(v = 0.65, col="red", lwd=1, lty=2)
axis(1, at = seq(0.1, 1, by = 0.1))
abline(v = 0.68, col="red", lwd=1, lty=2)
axis(1, at = seq(0.1, 1, by = 0.1))
abline(v = 0.70, col="red", lwd=1, lty=2)
axis(1, at = seq(0.1, 1, by = 0.1))

___________________________________________________________


glm_pred = data.frame(pred_3)
glimpse(glm_pred)
glimpse(td2)
ID=td2[,c(1)]
glm_pred = cbind(TD, glm_pred)
glm_pred = cbind(ID, glm_pred)
glimpse(glm_pred)
print(glm_pred)
write.csv(glm_pred,"D:\\Portfolio\\File_pred.csv", row.names = FALSE)
